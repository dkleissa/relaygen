package main

import "text/template"

const entity = `// Automatically generated by github.com/sebach1/gqlgen-relay

package {{.Pkg}}


// {{.Name}}Edge is the edge representation of {{.Name}}
type {{.Name}}Edge struct {
	Cursor string ` + "`{{.Marshal}}:\"cursor\"`" + `
	Node   {{.Type}}   ` + "`{{.Marshal}}:\"{{.Name}}\"`" + `
}

// {{.Name}}Connection is the connection containing edges of {{.Name}}
type {{.Name}}Connection struct {
	Edges      []*{{.Name}}Edge   ` + "`{{.Marshal}}:\"node\"`" + `
	PageInfo   relay.PageInfo  ` + "`{{.Marshal}}:\"pageInfo\"`" + `
	TotalCount *int           ` + "`{{.Marshal}}:\"totalCount\"`" + `
}

`

const base = `// Automatically generated by github.com/sebach1/gqlgen-relay
package {{.Pkg}}

// Cursor is the main pagination actor 
type Cursor struct {
	Offset int   ` + "`{{.Marshal}}:\"offset\"`" + `
	ID     string  ` + "`{{.Marshal}}:\"id\"`" + `
}

type ID interface {
	fmt.Stringer
}


// PageInfo is the paginator object
type PageInfo struct {
	HasNextPage     bool    ` + "`{{.Marshal}}:\"hasNextPage\"`" + `
	HasPreviousPage bool    ` + "`{{.Marshal}}:\"hasPreviousPage\"`" + `
	StartCursor     *string ` + "`{{.Marshal}}:\"startCursor\"`" + `
	EndCursor       *string ` + "`{{.Marshal}}:\"endCursor\"`" + `
}

// The Node relay interface
type Node interface {
	IsNode()
	GetID() ID
}
`

const sdlEntity = `
type {{.Name}}Edge {
    node: {{.Name}} 
    cursor: String
}

type {{.Name}}Connection{
    edges: [{{.Name}}Edge]
    pageInfo: PageInfo!
    totalCount: Int
}
`

const sdlBase = `
interface Node {
    id: ID!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}


`

var sdlEntityTemplate = template.Must(template.New("sdlEntity").Parse(sdlEntity))
var sdlBaseTemplate = template.Must(template.New("sdlBase").Parse(sdlBase))

var baseTemplate = template.Must(template.New("base").Parse(base))
var entityTemplate = template.Must(template.New("entity").Parse(entity))
